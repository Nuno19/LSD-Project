// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/03/2015 02:14:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Proj_demo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Proj_demo_vlg_sample_tst(
	CLOCK_50,
	KEY,
	sampler_tx
);
input  CLOCK_50;
input [1:0] KEY;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or KEY)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Proj_demo_vlg_check_tst (
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	sampler_rx
);
input [6:0] HEX4;
input [6:0] HEX5;
input [6:0] HEX6;
input [6:0] HEX7;
input sampler_rx;

reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [6:0] HEX6_expected;
reg [6:0] HEX7_expected;

reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [6:0] HEX6_prev;
reg [6:0] HEX7_prev;

reg [6:0] HEX4_expected_prev;
reg [6:0] HEX5_expected_prev;
reg [6:0] HEX6_expected_prev;
reg [6:0] HEX7_expected_prev;

reg [6:0] last_HEX4_exp;
reg [6:0] last_HEX5_exp;
reg [6:0] last_HEX6_exp;
reg [6:0] last_HEX7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
end

// update expected /o prevs

always @(trigger)
begin
	HEX4_expected_prev = HEX4_expected;
	HEX5_expected_prev = HEX5_expected;
	HEX6_expected_prev = HEX6_expected;
	HEX7_expected_prev = HEX7_expected;
end


// expected HEX4[ 6 ]
initial
begin
	HEX4_expected[6] = 1'bX;
end 
// expected HEX4[ 5 ]
initial
begin
	HEX4_expected[5] = 1'bX;
end 
// expected HEX4[ 4 ]
initial
begin
	HEX4_expected[4] = 1'bX;
end 
// expected HEX4[ 3 ]
initial
begin
	HEX4_expected[3] = 1'bX;
end 
// expected HEX4[ 2 ]
initial
begin
	HEX4_expected[2] = 1'bX;
end 
// expected HEX4[ 1 ]
initial
begin
	HEX4_expected[1] = 1'bX;
end 
// expected HEX4[ 0 ]
initial
begin
	HEX4_expected[0] = 1'bX;
end 
// expected HEX5[ 6 ]
initial
begin
	HEX5_expected[6] = 1'bX;
end 
// expected HEX5[ 5 ]
initial
begin
	HEX5_expected[5] = 1'bX;
end 
// expected HEX5[ 4 ]
initial
begin
	HEX5_expected[4] = 1'bX;
end 
// expected HEX5[ 3 ]
initial
begin
	HEX5_expected[3] = 1'bX;
end 
// expected HEX5[ 2 ]
initial
begin
	HEX5_expected[2] = 1'bX;
end 
// expected HEX5[ 1 ]
initial
begin
	HEX5_expected[1] = 1'bX;
end 
// expected HEX5[ 0 ]
initial
begin
	HEX5_expected[0] = 1'bX;
end 
// expected HEX6[ 6 ]
initial
begin
	HEX6_expected[6] = 1'bX;
end 
// expected HEX6[ 5 ]
initial
begin
	HEX6_expected[5] = 1'bX;
end 
// expected HEX6[ 4 ]
initial
begin
	HEX6_expected[4] = 1'bX;
end 
// expected HEX6[ 3 ]
initial
begin
	HEX6_expected[3] = 1'bX;
end 
// expected HEX6[ 2 ]
initial
begin
	HEX6_expected[2] = 1'bX;
end 
// expected HEX6[ 1 ]
initial
begin
	HEX6_expected[1] = 1'bX;
end 
// expected HEX6[ 0 ]
initial
begin
	HEX6_expected[0] = 1'bX;
end 
// expected HEX7[ 6 ]
initial
begin
	HEX7_expected[6] = 1'bX;
end 
// expected HEX7[ 5 ]
initial
begin
	HEX7_expected[5] = 1'bX;
end 
// expected HEX7[ 4 ]
initial
begin
	HEX7_expected[4] = 1'bX;
end 
// expected HEX7[ 3 ]
initial
begin
	HEX7_expected[3] = 1'bX;
end 
// expected HEX7[ 2 ]
initial
begin
	HEX7_expected[2] = 1'bX;
end 
// expected HEX7[ 1 ]
initial
begin
	HEX7_expected[1] = 1'bX;
end 
// expected HEX7[ 0 ]
initial
begin
	HEX7_expected[0] = 1'bX;
end 
// generate trigger
always @(HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | ",HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev);
	$display("| real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | ",HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev);
`endif
	if (
		( HEX4_expected_prev[0] !== 1'bx ) && ( HEX4_prev[0] !== HEX4_expected_prev[0] )
		&& ((HEX4_expected_prev[0] !== last_HEX4_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX4_exp[0] = HEX4_expected_prev[0];
	end
	if (
		( HEX4_expected_prev[1] !== 1'bx ) && ( HEX4_prev[1] !== HEX4_expected_prev[1] )
		&& ((HEX4_expected_prev[1] !== last_HEX4_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX4_exp[1] = HEX4_expected_prev[1];
	end
	if (
		( HEX4_expected_prev[2] !== 1'bx ) && ( HEX4_prev[2] !== HEX4_expected_prev[2] )
		&& ((HEX4_expected_prev[2] !== last_HEX4_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX4_exp[2] = HEX4_expected_prev[2];
	end
	if (
		( HEX4_expected_prev[3] !== 1'bx ) && ( HEX4_prev[3] !== HEX4_expected_prev[3] )
		&& ((HEX4_expected_prev[3] !== last_HEX4_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX4_exp[3] = HEX4_expected_prev[3];
	end
	if (
		( HEX4_expected_prev[4] !== 1'bx ) && ( HEX4_prev[4] !== HEX4_expected_prev[4] )
		&& ((HEX4_expected_prev[4] !== last_HEX4_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX4_exp[4] = HEX4_expected_prev[4];
	end
	if (
		( HEX4_expected_prev[5] !== 1'bx ) && ( HEX4_prev[5] !== HEX4_expected_prev[5] )
		&& ((HEX4_expected_prev[5] !== last_HEX4_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX4_exp[5] = HEX4_expected_prev[5];
	end
	if (
		( HEX4_expected_prev[6] !== 1'bx ) && ( HEX4_prev[6] !== HEX4_expected_prev[6] )
		&& ((HEX4_expected_prev[6] !== last_HEX4_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX4_exp[6] = HEX4_expected_prev[6];
	end
	if (
		( HEX5_expected_prev[0] !== 1'bx ) && ( HEX5_prev[0] !== HEX5_expected_prev[0] )
		&& ((HEX5_expected_prev[0] !== last_HEX5_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX5_exp[0] = HEX5_expected_prev[0];
	end
	if (
		( HEX5_expected_prev[1] !== 1'bx ) && ( HEX5_prev[1] !== HEX5_expected_prev[1] )
		&& ((HEX5_expected_prev[1] !== last_HEX5_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX5_exp[1] = HEX5_expected_prev[1];
	end
	if (
		( HEX5_expected_prev[2] !== 1'bx ) && ( HEX5_prev[2] !== HEX5_expected_prev[2] )
		&& ((HEX5_expected_prev[2] !== last_HEX5_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX5_exp[2] = HEX5_expected_prev[2];
	end
	if (
		( HEX5_expected_prev[3] !== 1'bx ) && ( HEX5_prev[3] !== HEX5_expected_prev[3] )
		&& ((HEX5_expected_prev[3] !== last_HEX5_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX5_exp[3] = HEX5_expected_prev[3];
	end
	if (
		( HEX5_expected_prev[4] !== 1'bx ) && ( HEX5_prev[4] !== HEX5_expected_prev[4] )
		&& ((HEX5_expected_prev[4] !== last_HEX5_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX5_exp[4] = HEX5_expected_prev[4];
	end
	if (
		( HEX5_expected_prev[5] !== 1'bx ) && ( HEX5_prev[5] !== HEX5_expected_prev[5] )
		&& ((HEX5_expected_prev[5] !== last_HEX5_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX5_exp[5] = HEX5_expected_prev[5];
	end
	if (
		( HEX5_expected_prev[6] !== 1'bx ) && ( HEX5_prev[6] !== HEX5_expected_prev[6] )
		&& ((HEX5_expected_prev[6] !== last_HEX5_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX5_exp[6] = HEX5_expected_prev[6];
	end
	if (
		( HEX6_expected_prev[0] !== 1'bx ) && ( HEX6_prev[0] !== HEX6_expected_prev[0] )
		&& ((HEX6_expected_prev[0] !== last_HEX6_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX6_exp[0] = HEX6_expected_prev[0];
	end
	if (
		( HEX6_expected_prev[1] !== 1'bx ) && ( HEX6_prev[1] !== HEX6_expected_prev[1] )
		&& ((HEX6_expected_prev[1] !== last_HEX6_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX6_exp[1] = HEX6_expected_prev[1];
	end
	if (
		( HEX6_expected_prev[2] !== 1'bx ) && ( HEX6_prev[2] !== HEX6_expected_prev[2] )
		&& ((HEX6_expected_prev[2] !== last_HEX6_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX6_exp[2] = HEX6_expected_prev[2];
	end
	if (
		( HEX6_expected_prev[3] !== 1'bx ) && ( HEX6_prev[3] !== HEX6_expected_prev[3] )
		&& ((HEX6_expected_prev[3] !== last_HEX6_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX6_exp[3] = HEX6_expected_prev[3];
	end
	if (
		( HEX6_expected_prev[4] !== 1'bx ) && ( HEX6_prev[4] !== HEX6_expected_prev[4] )
		&& ((HEX6_expected_prev[4] !== last_HEX6_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX6_exp[4] = HEX6_expected_prev[4];
	end
	if (
		( HEX6_expected_prev[5] !== 1'bx ) && ( HEX6_prev[5] !== HEX6_expected_prev[5] )
		&& ((HEX6_expected_prev[5] !== last_HEX6_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX6_exp[5] = HEX6_expected_prev[5];
	end
	if (
		( HEX6_expected_prev[6] !== 1'bx ) && ( HEX6_prev[6] !== HEX6_expected_prev[6] )
		&& ((HEX6_expected_prev[6] !== last_HEX6_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX6_exp[6] = HEX6_expected_prev[6];
	end
	if (
		( HEX7_expected_prev[0] !== 1'bx ) && ( HEX7_prev[0] !== HEX7_expected_prev[0] )
		&& ((HEX7_expected_prev[0] !== last_HEX7_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX7_exp[0] = HEX7_expected_prev[0];
	end
	if (
		( HEX7_expected_prev[1] !== 1'bx ) && ( HEX7_prev[1] !== HEX7_expected_prev[1] )
		&& ((HEX7_expected_prev[1] !== last_HEX7_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX7_exp[1] = HEX7_expected_prev[1];
	end
	if (
		( HEX7_expected_prev[2] !== 1'bx ) && ( HEX7_prev[2] !== HEX7_expected_prev[2] )
		&& ((HEX7_expected_prev[2] !== last_HEX7_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX7_exp[2] = HEX7_expected_prev[2];
	end
	if (
		( HEX7_expected_prev[3] !== 1'bx ) && ( HEX7_prev[3] !== HEX7_expected_prev[3] )
		&& ((HEX7_expected_prev[3] !== last_HEX7_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX7_exp[3] = HEX7_expected_prev[3];
	end
	if (
		( HEX7_expected_prev[4] !== 1'bx ) && ( HEX7_prev[4] !== HEX7_expected_prev[4] )
		&& ((HEX7_expected_prev[4] !== last_HEX7_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX7_exp[4] = HEX7_expected_prev[4];
	end
	if (
		( HEX7_expected_prev[5] !== 1'bx ) && ( HEX7_prev[5] !== HEX7_expected_prev[5] )
		&& ((HEX7_expected_prev[5] !== last_HEX7_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX7_exp[5] = HEX7_expected_prev[5];
	end
	if (
		( HEX7_expected_prev[6] !== 1'bx ) && ( HEX7_prev[6] !== HEX7_expected_prev[6] )
		&& ((HEX7_expected_prev[6] !== last_HEX7_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX7_exp[6] = HEX7_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Proj_demo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [1:0] KEY;
// wires                                               
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;

wire sampler;                             

// assign statements (if any)                          
Proj_demo i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY(KEY)
);

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #500 1'b1;
	#500;
end 
// KEY[ 1 ]
initial
begin
	KEY[1] = 1'b0;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b1;
	KEY[0] = #10000 1'b0;
end 

Proj_demo_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.KEY(KEY),
	.sampler_tx(sampler)
);

Proj_demo_vlg_check_tst tb_out(
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.sampler_rx(sampler)
);
endmodule

